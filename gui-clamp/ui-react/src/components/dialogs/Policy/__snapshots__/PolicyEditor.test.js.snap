// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Verify PolicyEditor Test the render method 1`] = `
<PolicyEditor
  policiesTableUpdateFunction={[Function]}
  policyModelType="onap.policies.monitoring.tcagen2"
  policyModelTypeVersion="1.0.0"
  policyName="org.onap.new"
  policyProperties={
    Object {
      "tca.policy": Object {
        "domain": "measurementsForVfScaling",
        "metricsPerEventName": Array [
          Object {
            "acmSchemaType": "VM",
            "eventName": "vLoadBalancer",
            "policyName": "DCAE.Config_tca-hi-lo",
            "policyScope": "DCAE",
            "policyVersion": "v0.0.1",
            "thresholds": Array [
              Object {
                "closedLoopControlName": "LOOP_test",
                "closedLoopEventStatus": "ONSET",
                "direction": "LESS_OR_EQUAL",
                "fieldPath": "$.event.measurementsForVfScalingFields.vNicPerformanceArray[*].receivedTotalPacketsDelta",
                "severity": "MAJOR",
                "thresholdValue": 200,
                "version": "1.0.2",
              },
            ],
          },
        ],
      },
    }
  }
  policyVersion="1.0.0"
>
  <styled.div>
    <div
      className="sc-dlnjwi ksxnfR"
    >
      <Alert
        closeLabel="Close alert"
        dismissible={true}
        onClose={[Function]}
        show={false}
        transition={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "defaultProps": Object {
              "appear": false,
              "in": false,
              "mountOnEnter": false,
              "timeout": 300,
              "unmountOnExit": false,
            },
            "render": [Function],
          }
        }
        variant="success"
      >
        <Fade
          appear={false}
          in={false}
          mountOnEnter={false}
          timeout={300}
          unmountOnExit={true}
        >
          <Transition
            addEndListener={[Function]}
            appear={false}
            enter={true}
            exit={true}
            in={false}
            mountOnEnter={false}
            onEnter={[Function]}
            onEntered={[Function]}
            onEntering={[Function]}
            onExit={[Function]}
            onExited={[Function]}
            onExiting={[Function]}
            timeout={300}
            unmountOnExit={true}
          />
        </Fade>
      </Alert>
      <Alert
        closeLabel="Close alert"
        dismissible={true}
        onClose={[Function]}
        show={false}
        transition={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "defaultProps": Object {
              "appear": false,
              "in": false,
              "mountOnEnter": false,
              "timeout": 300,
              "unmountOnExit": false,
            },
            "render": [Function],
          }
        }
        variant="danger"
      >
        <Fade
          appear={false}
          in={false}
          mountOnEnter={false}
          timeout={300}
          unmountOnExit={true}
        >
          <Transition
            addEndListener={[Function]}
            appear={false}
            enter={true}
            exit={true}
            in={false}
            mountOnEnter={false}
            onEnter={[Function]}
            onEntered={[Function]}
            onEntering={[Function]}
            onExit={[Function]}
            onExited={[Function]}
            onExiting={[Function]}
            timeout={300}
            unmountOnExit={true}
          />
        </Fade>
      </Alert>
      <WithStyles(ForwardRef(TextField))
        defaultValue="org.onap.new"
        id="policyName"
        label="Required"
        onChange={[Function]}
        required={true}
        size="small"
        variant="outlined"
      >
        <ForwardRef(TextField)
          classes={
            Object {
              "root": "MuiTextField-root",
            }
          }
          defaultValue="org.onap.new"
          id="policyName"
          label="Required"
          onChange={[Function]}
          required={true}
          size="small"
          variant="outlined"
        >
          <WithStyles(ForwardRef(FormControl))
            className="MuiTextField-root"
            color="primary"
            disabled={false}
            error={false}
            fullWidth={false}
            required={true}
            size="small"
            variant="outlined"
          >
            <ForwardRef(FormControl)
              className="MuiTextField-root"
              classes={
                Object {
                  "fullWidth": "MuiFormControl-fullWidth",
                  "marginDense": "MuiFormControl-marginDense",
                  "marginNormal": "MuiFormControl-marginNormal",
                  "root": "MuiFormControl-root",
                }
              }
              color="primary"
              disabled={false}
              error={false}
              fullWidth={false}
              required={true}
              size="small"
              variant="outlined"
            >
              <div
                className="MuiFormControl-root MuiTextField-root"
              >
                <WithStyles(ForwardRef(InputLabel))
                  htmlFor="policyName"
                  id="policyName-label"
                >
                  <ForwardRef(InputLabel)
                    classes={
                      Object {
                        "animated": "MuiInputLabel-animated",
                        "asterisk": "MuiInputLabel-asterisk",
                        "disabled": "Mui-disabled",
                        "error": "Mui-error",
                        "filled": "MuiInputLabel-filled",
                        "focused": "Mui-focused",
                        "formControl": "MuiInputLabel-formControl",
                        "marginDense": "MuiInputLabel-marginDense",
                        "outlined": "MuiInputLabel-outlined",
                        "required": "Mui-required",
                        "root": "MuiInputLabel-root",
                        "shrink": "MuiInputLabel-shrink",
                      }
                    }
                    htmlFor="policyName"
                    id="policyName-label"
                  >
                    <WithStyles(ForwardRef(FormLabel))
                      className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-shrink MuiInputLabel-marginDense MuiInputLabel-outlined"
                      classes={
                        Object {
                          "asterisk": "MuiInputLabel-asterisk",
                          "disabled": "Mui-disabled",
                          "error": "Mui-error",
                          "focused": "Mui-focused",
                          "required": "Mui-required",
                        }
                      }
                      data-shrink={true}
                      htmlFor="policyName"
                      id="policyName-label"
                    >
                      <ForwardRef(FormLabel)
                        className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-shrink MuiInputLabel-marginDense MuiInputLabel-outlined"
                        classes={
                          Object {
                            "asterisk": "MuiFormLabel-asterisk MuiInputLabel-asterisk",
                            "colorSecondary": "MuiFormLabel-colorSecondary",
                            "disabled": "Mui-disabled Mui-disabled",
                            "error": "Mui-error Mui-error",
                            "filled": "MuiFormLabel-filled",
                            "focused": "Mui-focused Mui-focused",
                            "required": "Mui-required Mui-required",
                            "root": "MuiFormLabel-root",
                          }
                        }
                        data-shrink={true}
                        htmlFor="policyName"
                        id="policyName-label"
                      >
                        <label
                          className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-shrink MuiInputLabel-marginDense MuiInputLabel-outlined MuiFormLabel-filled Mui-required Mui-required"
                          data-shrink={true}
                          htmlFor="policyName"
                          id="policyName-label"
                        >
                          Required
                          <span
                            aria-hidden={true}
                            className="MuiFormLabel-asterisk MuiInputLabel-asterisk"
                          >
                             
                            *
                          </span>
                        </label>
                      </ForwardRef(FormLabel)>
                    </WithStyles(ForwardRef(FormLabel))>
                  </ForwardRef(InputLabel)>
                </WithStyles(ForwardRef(InputLabel))>
                <WithStyles(ForwardRef(OutlinedInput))
                  autoFocus={false}
                  defaultValue="org.onap.new"
                  fullWidth={false}
                  id="policyName"
                  label={
                    <React.Fragment>
                      Required
                       *
                    </React.Fragment>
                  }
                  multiline={false}
                  onChange={[Function]}
                >
                  <ForwardRef(OutlinedInput)
                    autoFocus={false}
                    classes={
                      Object {
                        "adornedEnd": "MuiOutlinedInput-adornedEnd",
                        "adornedStart": "MuiOutlinedInput-adornedStart",
                        "colorSecondary": "MuiOutlinedInput-colorSecondary",
                        "disabled": "Mui-disabled",
                        "error": "Mui-error",
                        "focused": "Mui-focused",
                        "input": "MuiOutlinedInput-input",
                        "inputAdornedEnd": "MuiOutlinedInput-inputAdornedEnd",
                        "inputAdornedStart": "MuiOutlinedInput-inputAdornedStart",
                        "inputMarginDense": "MuiOutlinedInput-inputMarginDense",
                        "inputMultiline": "MuiOutlinedInput-inputMultiline",
                        "marginDense": "MuiOutlinedInput-marginDense",
                        "multiline": "MuiOutlinedInput-multiline",
                        "notchedOutline": "MuiOutlinedInput-notchedOutline",
                        "root": "MuiOutlinedInput-root",
                      }
                    }
                    defaultValue="org.onap.new"
                    fullWidth={false}
                    id="policyName"
                    label={
                      <React.Fragment>
                        Required
                         *
                      </React.Fragment>
                    }
                    multiline={false}
                    onChange={[Function]}
                  >
                    <WithStyles(ForwardRef(InputBase))
                      autoFocus={false}
                      classes={
                        Object {
                          "adornedEnd": "MuiOutlinedInput-adornedEnd",
                          "adornedStart": "MuiOutlinedInput-adornedStart",
                          "colorSecondary": "MuiOutlinedInput-colorSecondary",
                          "disabled": "Mui-disabled",
                          "error": "Mui-error",
                          "focused": "Mui-focused",
                          "input": "MuiOutlinedInput-input",
                          "inputAdornedEnd": "MuiOutlinedInput-inputAdornedEnd",
                          "inputAdornedStart": "MuiOutlinedInput-inputAdornedStart",
                          "inputMarginDense": "MuiOutlinedInput-inputMarginDense",
                          "inputMultiline": "MuiOutlinedInput-inputMultiline",
                          "marginDense": "MuiOutlinedInput-marginDense",
                          "multiline": "MuiOutlinedInput-multiline",
                          "notchedOutline": null,
                          "root": "MuiOutlinedInput-root",
                        }
                      }
                      defaultValue="org.onap.new"
                      fullWidth={false}
                      id="policyName"
                      inputComponent="input"
                      multiline={false}
                      onChange={[Function]}
                      renderSuffix={[Function]}
                      type="text"
                    >
                      <ForwardRef(InputBase)
                        autoFocus={false}
                        classes={
                          Object {
                            "adornedEnd": "MuiInputBase-adornedEnd MuiOutlinedInput-adornedEnd",
                            "adornedStart": "MuiInputBase-adornedStart MuiOutlinedInput-adornedStart",
                            "colorSecondary": "MuiInputBase-colorSecondary MuiOutlinedInput-colorSecondary",
                            "disabled": "Mui-disabled Mui-disabled",
                            "error": "Mui-error Mui-error",
                            "focused": "Mui-focused Mui-focused",
                            "formControl": "MuiInputBase-formControl",
                            "fullWidth": "MuiInputBase-fullWidth",
                            "input": "MuiInputBase-input MuiOutlinedInput-input",
                            "inputAdornedEnd": "MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd",
                            "inputAdornedStart": "MuiInputBase-inputAdornedStart MuiOutlinedInput-inputAdornedStart",
                            "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
                            "inputMarginDense": "MuiInputBase-inputMarginDense MuiOutlinedInput-inputMarginDense",
                            "inputMultiline": "MuiInputBase-inputMultiline MuiOutlinedInput-inputMultiline",
                            "inputTypeSearch": "MuiInputBase-inputTypeSearch",
                            "marginDense": "MuiInputBase-marginDense MuiOutlinedInput-marginDense",
                            "multiline": "MuiInputBase-multiline MuiOutlinedInput-multiline",
                            "root": "MuiInputBase-root MuiOutlinedInput-root",
                          }
                        }
                        defaultValue="org.onap.new"
                        fullWidth={false}
                        id="policyName"
                        inputComponent="input"
                        multiline={false}
                        onChange={[Function]}
                        renderSuffix={[Function]}
                        type="text"
                      >
                        <div
                          className="MuiInputBase-root MuiOutlinedInput-root MuiInputBase-formControl MuiInputBase-marginDense MuiOutlinedInput-marginDense"
                          onClick={[Function]}
                        >
                          <input
                            aria-invalid={false}
                            autoFocus={false}
                            className="MuiInputBase-input MuiOutlinedInput-input MuiInputBase-inputMarginDense MuiOutlinedInput-inputMarginDense"
                            defaultValue="org.onap.new"
                            disabled={false}
                            id="policyName"
                            onAnimationStart={[Function]}
                            onBlur={[Function]}
                            onChange={[Function]}
                            onFocus={[Function]}
                            required={true}
                            type="text"
                          />
                          <WithStyles(ForwardRef(NotchedOutline))
                            className="MuiOutlinedInput-notchedOutline"
                            label={
                              <React.Fragment>
                                Required
                                 *
                              </React.Fragment>
                            }
                            labelWidth={0}
                            notched={true}
                          >
                            <ForwardRef(NotchedOutline)
                              className="MuiOutlinedInput-notchedOutline"
                              classes={
                                Object {
                                  "legend": "PrivateNotchedOutline-legend-2",
                                  "legendLabelled": "PrivateNotchedOutline-legendLabelled-3",
                                  "legendNotched": "PrivateNotchedOutline-legendNotched-4",
                                  "root": "PrivateNotchedOutline-root-1",
                                }
                              }
                              label={
                                <React.Fragment>
                                  Required
                                   *
                                </React.Fragment>
                              }
                              labelWidth={0}
                              notched={true}
                            >
                              <fieldset
                                aria-hidden={true}
                                className="PrivateNotchedOutline-root-1 MuiOutlinedInput-notchedOutline"
                              >
                                <legend
                                  className="PrivateNotchedOutline-legendLabelled-3 PrivateNotchedOutline-legendNotched-4"
                                >
                                  <span>
                                    Required
                                     *
                                  </span>
                                </legend>
                              </fieldset>
                            </ForwardRef(NotchedOutline)>
                          </WithStyles(ForwardRef(NotchedOutline))>
                        </div>
                      </ForwardRef(InputBase)>
                    </WithStyles(ForwardRef(InputBase))>
                  </ForwardRef(OutlinedInput)>
                </WithStyles(ForwardRef(OutlinedInput))>
              </div>
            </ForwardRef(FormControl)>
          </WithStyles(ForwardRef(FormControl))>
        </ForwardRef(TextField)>
      </WithStyles(ForwardRef(TextField))>
      <WithStyles(ForwardRef(TextField))
        defaultValue="1.0.0"
        id="policyVersion"
        label="Required"
        onChange={[Function]}
        required={true}
        size="small"
        variant="outlined"
      >
        <ForwardRef(TextField)
          classes={
            Object {
              "root": "MuiTextField-root",
            }
          }
          defaultValue="1.0.0"
          id="policyVersion"
          label="Required"
          onChange={[Function]}
          required={true}
          size="small"
          variant="outlined"
        >
          <WithStyles(ForwardRef(FormControl))
            className="MuiTextField-root"
            color="primary"
            disabled={false}
            error={false}
            fullWidth={false}
            required={true}
            size="small"
            variant="outlined"
          >
            <ForwardRef(FormControl)
              className="MuiTextField-root"
              classes={
                Object {
                  "fullWidth": "MuiFormControl-fullWidth",
                  "marginDense": "MuiFormControl-marginDense",
                  "marginNormal": "MuiFormControl-marginNormal",
                  "root": "MuiFormControl-root",
                }
              }
              color="primary"
              disabled={false}
              error={false}
              fullWidth={false}
              required={true}
              size="small"
              variant="outlined"
            >
              <div
                className="MuiFormControl-root MuiTextField-root"
              >
                <WithStyles(ForwardRef(InputLabel))
                  htmlFor="policyVersion"
                  id="policyVersion-label"
                >
                  <ForwardRef(InputLabel)
                    classes={
                      Object {
                        "animated": "MuiInputLabel-animated",
                        "asterisk": "MuiInputLabel-asterisk",
                        "disabled": "Mui-disabled",
                        "error": "Mui-error",
                        "filled": "MuiInputLabel-filled",
                        "focused": "Mui-focused",
                        "formControl": "MuiInputLabel-formControl",
                        "marginDense": "MuiInputLabel-marginDense",
                        "outlined": "MuiInputLabel-outlined",
                        "required": "Mui-required",
                        "root": "MuiInputLabel-root",
                        "shrink": "MuiInputLabel-shrink",
                      }
                    }
                    htmlFor="policyVersion"
                    id="policyVersion-label"
                  >
                    <WithStyles(ForwardRef(FormLabel))
                      className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-shrink MuiInputLabel-marginDense MuiInputLabel-outlined"
                      classes={
                        Object {
                          "asterisk": "MuiInputLabel-asterisk",
                          "disabled": "Mui-disabled",
                          "error": "Mui-error",
                          "focused": "Mui-focused",
                          "required": "Mui-required",
                        }
                      }
                      data-shrink={true}
                      htmlFor="policyVersion"
                      id="policyVersion-label"
                    >
                      <ForwardRef(FormLabel)
                        className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-shrink MuiInputLabel-marginDense MuiInputLabel-outlined"
                        classes={
                          Object {
                            "asterisk": "MuiFormLabel-asterisk MuiInputLabel-asterisk",
                            "colorSecondary": "MuiFormLabel-colorSecondary",
                            "disabled": "Mui-disabled Mui-disabled",
                            "error": "Mui-error Mui-error",
                            "filled": "MuiFormLabel-filled",
                            "focused": "Mui-focused Mui-focused",
                            "required": "Mui-required Mui-required",
                            "root": "MuiFormLabel-root",
                          }
                        }
                        data-shrink={true}
                        htmlFor="policyVersion"
                        id="policyVersion-label"
                      >
                        <label
                          className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-shrink MuiInputLabel-marginDense MuiInputLabel-outlined MuiFormLabel-filled Mui-required Mui-required"
                          data-shrink={true}
                          htmlFor="policyVersion"
                          id="policyVersion-label"
                        >
                          Required
                          <span
                            aria-hidden={true}
                            className="MuiFormLabel-asterisk MuiInputLabel-asterisk"
                          >
                             
                            *
                          </span>
                        </label>
                      </ForwardRef(FormLabel)>
                    </WithStyles(ForwardRef(FormLabel))>
                  </ForwardRef(InputLabel)>
                </WithStyles(ForwardRef(InputLabel))>
                <WithStyles(ForwardRef(OutlinedInput))
                  autoFocus={false}
                  defaultValue="1.0.0"
                  fullWidth={false}
                  id="policyVersion"
                  label={
                    <React.Fragment>
                      Required
                       *
                    </React.Fragment>
                  }
                  multiline={false}
                  onChange={[Function]}
                >
                  <ForwardRef(OutlinedInput)
                    autoFocus={false}
                    classes={
                      Object {
                        "adornedEnd": "MuiOutlinedInput-adornedEnd",
                        "adornedStart": "MuiOutlinedInput-adornedStart",
                        "colorSecondary": "MuiOutlinedInput-colorSecondary",
                        "disabled": "Mui-disabled",
                        "error": "Mui-error",
                        "focused": "Mui-focused",
                        "input": "MuiOutlinedInput-input",
                        "inputAdornedEnd": "MuiOutlinedInput-inputAdornedEnd",
                        "inputAdornedStart": "MuiOutlinedInput-inputAdornedStart",
                        "inputMarginDense": "MuiOutlinedInput-inputMarginDense",
                        "inputMultiline": "MuiOutlinedInput-inputMultiline",
                        "marginDense": "MuiOutlinedInput-marginDense",
                        "multiline": "MuiOutlinedInput-multiline",
                        "notchedOutline": "MuiOutlinedInput-notchedOutline",
                        "root": "MuiOutlinedInput-root",
                      }
                    }
                    defaultValue="1.0.0"
                    fullWidth={false}
                    id="policyVersion"
                    label={
                      <React.Fragment>
                        Required
                         *
                      </React.Fragment>
                    }
                    multiline={false}
                    onChange={[Function]}
                  >
                    <WithStyles(ForwardRef(InputBase))
                      autoFocus={false}
                      classes={
                        Object {
                          "adornedEnd": "MuiOutlinedInput-adornedEnd",
                          "adornedStart": "MuiOutlinedInput-adornedStart",
                          "colorSecondary": "MuiOutlinedInput-colorSecondary",
                          "disabled": "Mui-disabled",
                          "error": "Mui-error",
                          "focused": "Mui-focused",
                          "input": "MuiOutlinedInput-input",
                          "inputAdornedEnd": "MuiOutlinedInput-inputAdornedEnd",
                          "inputAdornedStart": "MuiOutlinedInput-inputAdornedStart",
                          "inputMarginDense": "MuiOutlinedInput-inputMarginDense",
                          "inputMultiline": "MuiOutlinedInput-inputMultiline",
                          "marginDense": "MuiOutlinedInput-marginDense",
                          "multiline": "MuiOutlinedInput-multiline",
                          "notchedOutline": null,
                          "root": "MuiOutlinedInput-root",
                        }
                      }
                      defaultValue="1.0.0"
                      fullWidth={false}
                      id="policyVersion"
                      inputComponent="input"
                      multiline={false}
                      onChange={[Function]}
                      renderSuffix={[Function]}
                      type="text"
                    >
                      <ForwardRef(InputBase)
                        autoFocus={false}
                        classes={
                          Object {
                            "adornedEnd": "MuiInputBase-adornedEnd MuiOutlinedInput-adornedEnd",
                            "adornedStart": "MuiInputBase-adornedStart MuiOutlinedInput-adornedStart",
                            "colorSecondary": "MuiInputBase-colorSecondary MuiOutlinedInput-colorSecondary",
                            "disabled": "Mui-disabled Mui-disabled",
                            "error": "Mui-error Mui-error",
                            "focused": "Mui-focused Mui-focused",
                            "formControl": "MuiInputBase-formControl",
                            "fullWidth": "MuiInputBase-fullWidth",
                            "input": "MuiInputBase-input MuiOutlinedInput-input",
                            "inputAdornedEnd": "MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd",
                            "inputAdornedStart": "MuiInputBase-inputAdornedStart MuiOutlinedInput-inputAdornedStart",
                            "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
                            "inputMarginDense": "MuiInputBase-inputMarginDense MuiOutlinedInput-inputMarginDense",
                            "inputMultiline": "MuiInputBase-inputMultiline MuiOutlinedInput-inputMultiline",
                            "inputTypeSearch": "MuiInputBase-inputTypeSearch",
                            "marginDense": "MuiInputBase-marginDense MuiOutlinedInput-marginDense",
                            "multiline": "MuiInputBase-multiline MuiOutlinedInput-multiline",
                            "root": "MuiInputBase-root MuiOutlinedInput-root",
                          }
                        }
                        defaultValue="1.0.0"
                        fullWidth={false}
                        id="policyVersion"
                        inputComponent="input"
                        multiline={false}
                        onChange={[Function]}
                        renderSuffix={[Function]}
                        type="text"
                      >
                        <div
                          className="MuiInputBase-root MuiOutlinedInput-root MuiInputBase-formControl MuiInputBase-marginDense MuiOutlinedInput-marginDense"
                          onClick={[Function]}
                        >
                          <input
                            aria-invalid={false}
                            autoFocus={false}
                            className="MuiInputBase-input MuiOutlinedInput-input MuiInputBase-inputMarginDense MuiOutlinedInput-inputMarginDense"
                            defaultValue="1.0.0"
                            disabled={false}
                            id="policyVersion"
                            onAnimationStart={[Function]}
                            onBlur={[Function]}
                            onChange={[Function]}
                            onFocus={[Function]}
                            required={true}
                            type="text"
                          />
                          <WithStyles(ForwardRef(NotchedOutline))
                            className="MuiOutlinedInput-notchedOutline"
                            label={
                              <React.Fragment>
                                Required
                                 *
                              </React.Fragment>
                            }
                            labelWidth={0}
                            notched={true}
                          >
                            <ForwardRef(NotchedOutline)
                              className="MuiOutlinedInput-notchedOutline"
                              classes={
                                Object {
                                  "legend": "PrivateNotchedOutline-legend-2",
                                  "legendLabelled": "PrivateNotchedOutline-legendLabelled-3",
                                  "legendNotched": "PrivateNotchedOutline-legendNotched-4",
                                  "root": "PrivateNotchedOutline-root-1",
                                }
                              }
                              label={
                                <React.Fragment>
                                  Required
                                   *
                                </React.Fragment>
                              }
                              labelWidth={0}
                              notched={true}
                            >
                              <fieldset
                                aria-hidden={true}
                                className="PrivateNotchedOutline-root-1 MuiOutlinedInput-notchedOutline"
                              >
                                <legend
                                  className="PrivateNotchedOutline-legendLabelled-3 PrivateNotchedOutline-legendNotched-4"
                                >
                                  <span>
                                    Required
                                     *
                                  </span>
                                </legend>
                              </fieldset>
                            </ForwardRef(NotchedOutline)>
                          </WithStyles(ForwardRef(NotchedOutline))>
                        </div>
                      </ForwardRef(InputBase)>
                    </WithStyles(ForwardRef(InputBase))>
                  </ForwardRef(OutlinedInput)>
                </WithStyles(ForwardRef(OutlinedInput))>
              </div>
            </ForwardRef(FormControl)>
          </WithStyles(ForwardRef(FormControl))>
        </ForwardRef(TextField)>
      </WithStyles(ForwardRef(TextField))>
      <Button
        active={false}
        disabled={false}
        onClick={[Function]}
        title="Create a new policy version from the defined parameters"
        variant="secondary"
      >
        <button
          className="btn btn-secondary"
          disabled={false}
          onClick={[Function]}
          title="Create a new policy version from the defined parameters"
          type="button"
        >
          Create New Version
        </button>
      </Button>
      <styled.div
        id="onap.policies.monitoring.tcagen2_1.0.0_org.onap.new_1.0.0"
        title="Policy Properties"
      >
        <div
          className="sc-gtsrHT duRXVT"
          id="onap.policies.monitoring.tcagen2_1.0.0_org.onap.new_1.0.0"
          title="Policy Properties"
        />
      </styled.div>
    </div>
  </styled.div>
</PolicyEditor>
`;
