// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Verify MenuBar Test the render method 1`] = `
<NavbarCollapse>
  <Styled(NavDropdown)
    title="POLICY Framework"
  >
    <DropdownItem
      as={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": e {
            "baseHash": -715527839,
            "baseStyle": undefined,
            "componentId": "sc-bdnxRM",
            "isStatic": false,
            "rules": Array [
              "
  color: ",
              [Function],
              ";
  background-color: ",
              [Function],
              ";
  font-weight: normal;
  display: block;
  width: 100%;
  padding: .25rem 1.5rem;
  clear: both;
  text-align: inherit;
  white-space: nowrap;
  border: 0;

  :hover {
    text-decoration: none;
    background-color: ",
              [Function],
              ";
    color: ",
              [Function],
              ";
  }
",
            ],
            "staticRulesId": "",
          },
          "foldedComponentIds": Array [],
          "render": [Function],
          "shouldForwardProp": undefined,
          "styledComponentId": "sc-bdnxRM",
          "target": Object {
            "$$typeof": Symbol(react.forward_ref),
            "propTypes": Object {
              "innerRef": [Function],
              "onClick": [Function],
              "replace": [Function],
              "target": [Function],
              "to": [Function],
            },
            "render": [Function],
          },
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      disabled={false}
      to="/viewAllPolicies"
    >
      View All Policies
    </DropdownItem>
  </Styled(NavDropdown)>
  <Styled(NavDropdown)
    title="CLAMP Options"
  >
    <DropdownItem
      as={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": e {
            "baseHash": -715527839,
            "baseStyle": undefined,
            "componentId": "sc-bdnxRM",
            "isStatic": false,
            "rules": Array [
              "
  color: ",
              [Function],
              ";
  background-color: ",
              [Function],
              ";
  font-weight: normal;
  display: block;
  width: 100%;
  padding: .25rem 1.5rem;
  clear: both;
  text-align: inherit;
  white-space: nowrap;
  border: 0;

  :hover {
    text-decoration: none;
    background-color: ",
              [Function],
              ";
    color: ",
              [Function],
              ";
  }
",
            ],
            "staticRulesId": "",
          },
          "foldedComponentIds": Array [],
          "render": [Function],
          "shouldForwardProp": undefined,
          "styledComponentId": "sc-bdnxRM",
          "target": Object {
            "$$typeof": Symbol(react.forward_ref),
            "propTypes": Object {
              "innerRef": [Function],
              "onClick": [Function],
              "replace": [Function],
              "target": [Function],
              "to": [Function],
            },
            "render": [Function],
          },
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      disabled={false}
      to="/manageDictionaries"
    >
      Tosca Metadata Dictionaries
    </DropdownItem>
    <DropdownDivider
      role="separator"
    />
    <DropdownItem
      as={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": e {
            "baseHash": -715527839,
            "baseStyle": undefined,
            "componentId": "sc-bdnxRM",
            "isStatic": false,
            "rules": Array [
              "
  color: ",
              [Function],
              ";
  background-color: ",
              [Function],
              ";
  font-weight: normal;
  display: block;
  width: 100%;
  padding: .25rem 1.5rem;
  clear: both;
  text-align: inherit;
  white-space: nowrap;
  border: 0;

  :hover {
    text-decoration: none;
    background-color: ",
              [Function],
              ";
    color: ",
              [Function],
              ";
  }
",
            ],
            "staticRulesId": "",
          },
          "foldedComponentIds": Array [],
          "render": [Function],
          "shouldForwardProp": undefined,
          "styledComponentId": "sc-bdnxRM",
          "target": Object {
            "$$typeof": Symbol(react.forward_ref),
            "propTypes": Object {
              "innerRef": [Function],
              "onClick": [Function],
              "replace": [Function],
              "target": [Function],
              "to": [Function],
            },
            "render": [Function],
          },
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      disabled={false}
      to="/viewLoopTemplatesModal"
    >
      View All Loop Templates
    </DropdownItem>
  </Styled(NavDropdown)>
  <Styled(NavDropdown)
    title="LOOP Instance"
  >
    <DropdownItem
      as={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": e {
            "baseHash": -715527839,
            "baseStyle": undefined,
            "componentId": "sc-bdnxRM",
            "isStatic": false,
            "rules": Array [
              "
  color: ",
              [Function],
              ";
  background-color: ",
              [Function],
              ";
  font-weight: normal;
  display: block;
  width: 100%;
  padding: .25rem 1.5rem;
  clear: both;
  text-align: inherit;
  white-space: nowrap;
  border: 0;

  :hover {
    text-decoration: none;
    background-color: ",
              [Function],
              ";
    color: ",
              [Function],
              ";
  }
",
            ],
            "staticRulesId": "",
          },
          "foldedComponentIds": Array [],
          "render": [Function],
          "shouldForwardProp": undefined,
          "styledComponentId": "sc-bdnxRM",
          "target": Object {
            "$$typeof": Symbol(react.forward_ref),
            "propTypes": Object {
              "innerRef": [Function],
              "onClick": [Function],
              "replace": [Function],
              "target": [Function],
              "to": [Function],
            },
            "render": [Function],
          },
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      disabled={false}
      to="/createLoop"
    >
      Create
    </DropdownItem>
    <DropdownItem
      as={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": e {
            "baseHash": -715527839,
            "baseStyle": undefined,
            "componentId": "sc-bdnxRM",
            "isStatic": false,
            "rules": Array [
              "
  color: ",
              [Function],
              ";
  background-color: ",
              [Function],
              ";
  font-weight: normal;
  display: block;
  width: 100%;
  padding: .25rem 1.5rem;
  clear: both;
  text-align: inherit;
  white-space: nowrap;
  border: 0;

  :hover {
    text-decoration: none;
    background-color: ",
              [Function],
              ";
    color: ",
              [Function],
              ";
  }
",
            ],
            "staticRulesId": "",
          },
          "foldedComponentIds": Array [],
          "render": [Function],
          "shouldForwardProp": undefined,
          "styledComponentId": "sc-bdnxRM",
          "target": Object {
            "$$typeof": Symbol(react.forward_ref),
            "propTypes": Object {
              "innerRef": [Function],
              "onClick": [Function],
              "replace": [Function],
              "target": [Function],
              "to": [Function],
            },
            "render": [Function],
          },
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      disabled={false}
      to="/openLoop"
    >
      Open
    </DropdownItem>
    <DropdownItem
      as={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": e {
            "baseHash": -715527839,
            "baseStyle": undefined,
            "componentId": "sc-bdnxRM",
            "isStatic": false,
            "rules": Array [
              "
  color: ",
              [Function],
              ";
  background-color: ",
              [Function],
              ";
  font-weight: normal;
  display: block;
  width: 100%;
  padding: .25rem 1.5rem;
  clear: both;
  text-align: inherit;
  white-space: nowrap;
  border: 0;

  :hover {
    text-decoration: none;
    background-color: ",
              [Function],
              ";
    color: ",
              [Function],
              ";
  }
",
            ],
            "staticRulesId": "",
          },
          "foldedComponentIds": Array [],
          "render": [Function],
          "shouldForwardProp": undefined,
          "styledComponentId": "sc-bdnxRM",
          "target": Object {
            "$$typeof": Symbol(react.forward_ref),
            "propTypes": Object {
              "innerRef": [Function],
              "onClick": [Function],
              "replace": [Function],
              "target": [Function],
              "to": [Function],
            },
            "render": [Function],
          },
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      disabled={true}
      to="/closeLoop"
    >
      Close
    </DropdownItem>
    <DropdownItem
      as={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": e {
            "baseHash": -715527839,
            "baseStyle": undefined,
            "componentId": "sc-bdnxRM",
            "isStatic": false,
            "rules": Array [
              "
  color: ",
              [Function],
              ";
  background-color: ",
              [Function],
              ";
  font-weight: normal;
  display: block;
  width: 100%;
  padding: .25rem 1.5rem;
  clear: both;
  text-align: inherit;
  white-space: nowrap;
  border: 0;

  :hover {
    text-decoration: none;
    background-color: ",
              [Function],
              ";
    color: ",
              [Function],
              ";
  }
",
            ],
            "staticRulesId": "",
          },
          "foldedComponentIds": Array [],
          "render": [Function],
          "shouldForwardProp": undefined,
          "styledComponentId": "sc-bdnxRM",
          "target": Object {
            "$$typeof": Symbol(react.forward_ref),
            "propTypes": Object {
              "innerRef": [Function],
              "onClick": [Function],
              "replace": [Function],
              "target": [Function],
              "to": [Function],
            },
            "render": [Function],
          },
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      disabled={true}
      to="/modifyLoop"
    >
      Modify
    </DropdownItem>
    <DropdownDivider
      role="separator"
    />
    <DropdownItem
      as={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": e {
            "baseHash": -715527839,
            "baseStyle": undefined,
            "componentId": "sc-bdnxRM",
            "isStatic": false,
            "rules": Array [
              "
  color: ",
              [Function],
              ";
  background-color: ",
              [Function],
              ";
  font-weight: normal;
  display: block;
  width: 100%;
  padding: .25rem 1.5rem;
  clear: both;
  text-align: inherit;
  white-space: nowrap;
  border: 0;

  :hover {
    text-decoration: none;
    background-color: ",
              [Function],
              ";
    color: ",
              [Function],
              ";
  }
",
            ],
            "staticRulesId": "",
          },
          "foldedComponentIds": Array [],
          "render": [Function],
          "shouldForwardProp": undefined,
          "styledComponentId": "sc-bdnxRM",
          "target": Object {
            "$$typeof": Symbol(react.forward_ref),
            "propTypes": Object {
              "innerRef": [Function],
              "onClick": [Function],
              "replace": [Function],
              "target": [Function],
              "to": [Function],
            },
            "render": [Function],
          },
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      disabled={true}
      to="/loopProperties"
    >
      Properties
    </DropdownItem>
    <DropdownItem
      as={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": e {
            "baseHash": -715527839,
            "baseStyle": undefined,
            "componentId": "sc-bdnxRM",
            "isStatic": false,
            "rules": Array [
              "
  color: ",
              [Function],
              ";
  background-color: ",
              [Function],
              ";
  font-weight: normal;
  display: block;
  width: 100%;
  padding: .25rem 1.5rem;
  clear: both;
  text-align: inherit;
  white-space: nowrap;
  border: 0;

  :hover {
    text-decoration: none;
    background-color: ",
              [Function],
              ";
    color: ",
              [Function],
              ";
  }
",
            ],
            "staticRulesId": "",
          },
          "foldedComponentIds": Array [],
          "render": [Function],
          "shouldForwardProp": undefined,
          "styledComponentId": "sc-bdnxRM",
          "target": Object {
            "$$typeof": Symbol(react.forward_ref),
            "propTypes": Object {
              "innerRef": [Function],
              "onClick": [Function],
              "replace": [Function],
              "target": [Function],
              "to": [Function],
            },
            "render": [Function],
          },
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      disabled={true}
      to="/refreshStatus"
    >
      Refresh Status
    </DropdownItem>
  </Styled(NavDropdown)>
  <Styled(NavDropdown)
    title="LOOP Operations"
  >
    <DropdownItem
      as={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": e {
            "baseHash": -715527839,
            "baseStyle": undefined,
            "componentId": "sc-bdnxRM",
            "isStatic": false,
            "rules": Array [
              "
  color: ",
              [Function],
              ";
  background-color: ",
              [Function],
              ";
  font-weight: normal;
  display: block;
  width: 100%;
  padding: .25rem 1.5rem;
  clear: both;
  text-align: inherit;
  white-space: nowrap;
  border: 0;

  :hover {
    text-decoration: none;
    background-color: ",
              [Function],
              ";
    color: ",
              [Function],
              ";
  }
",
            ],
            "staticRulesId": "",
          },
          "foldedComponentIds": Array [],
          "render": [Function],
          "shouldForwardProp": undefined,
          "styledComponentId": "sc-bdnxRM",
          "target": Object {
            "$$typeof": Symbol(react.forward_ref),
            "propTypes": Object {
              "innerRef": [Function],
              "onClick": [Function],
              "replace": [Function],
              "target": [Function],
              "to": [Function],
            },
            "render": [Function],
          },
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      disabled={true}
      to="/submit"
    >
      Create and deploy to Policy Framework (SUBMIT)
    </DropdownItem>
    <DropdownItem
      as={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": e {
            "baseHash": -715527839,
            "baseStyle": undefined,
            "componentId": "sc-bdnxRM",
            "isStatic": false,
            "rules": Array [
              "
  color: ",
              [Function],
              ";
  background-color: ",
              [Function],
              ";
  font-weight: normal;
  display: block;
  width: 100%;
  padding: .25rem 1.5rem;
  clear: both;
  text-align: inherit;
  white-space: nowrap;
  border: 0;

  :hover {
    text-decoration: none;
    background-color: ",
              [Function],
              ";
    color: ",
              [Function],
              ";
  }
",
            ],
            "staticRulesId": "",
          },
          "foldedComponentIds": Array [],
          "render": [Function],
          "shouldForwardProp": undefined,
          "styledComponentId": "sc-bdnxRM",
          "target": Object {
            "$$typeof": Symbol(react.forward_ref),
            "propTypes": Object {
              "innerRef": [Function],
              "onClick": [Function],
              "replace": [Function],
              "target": [Function],
              "to": [Function],
            },
            "render": [Function],
          },
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      disabled={true}
      to="/stop"
    >
      Undeploy from Policy Framework (STOP)
    </DropdownItem>
    <DropdownItem
      as={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": e {
            "baseHash": -715527839,
            "baseStyle": undefined,
            "componentId": "sc-bdnxRM",
            "isStatic": false,
            "rules": Array [
              "
  color: ",
              [Function],
              ";
  background-color: ",
              [Function],
              ";
  font-weight: normal;
  display: block;
  width: 100%;
  padding: .25rem 1.5rem;
  clear: both;
  text-align: inherit;
  white-space: nowrap;
  border: 0;

  :hover {
    text-decoration: none;
    background-color: ",
              [Function],
              ";
    color: ",
              [Function],
              ";
  }
",
            ],
            "staticRulesId": "",
          },
          "foldedComponentIds": Array [],
          "render": [Function],
          "shouldForwardProp": undefined,
          "styledComponentId": "sc-bdnxRM",
          "target": Object {
            "$$typeof": Symbol(react.forward_ref),
            "propTypes": Object {
              "innerRef": [Function],
              "onClick": [Function],
              "replace": [Function],
              "target": [Function],
              "to": [Function],
            },
            "render": [Function],
          },
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      disabled={true}
      to="/restart"
    >
      ReDeploy to Policy Framework (RESTART)
    </DropdownItem>
    <DropdownItem
      as={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": e {
            "baseHash": -715527839,
            "baseStyle": undefined,
            "componentId": "sc-bdnxRM",
            "isStatic": false,
            "rules": Array [
              "
  color: ",
              [Function],
              ";
  background-color: ",
              [Function],
              ";
  font-weight: normal;
  display: block;
  width: 100%;
  padding: .25rem 1.5rem;
  clear: both;
  text-align: inherit;
  white-space: nowrap;
  border: 0;

  :hover {
    text-decoration: none;
    background-color: ",
              [Function],
              ";
    color: ",
              [Function],
              ";
  }
",
            ],
            "staticRulesId": "",
          },
          "foldedComponentIds": Array [],
          "render": [Function],
          "shouldForwardProp": undefined,
          "styledComponentId": "sc-bdnxRM",
          "target": Object {
            "$$typeof": Symbol(react.forward_ref),
            "propTypes": Object {
              "innerRef": [Function],
              "onClick": [Function],
              "replace": [Function],
              "target": [Function],
              "to": [Function],
            },
            "render": [Function],
          },
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      disabled={true}
      to="/delete"
    >
      Delete loop instance (DELETE)
    </DropdownItem>
    <DropdownDivider
      role="separator"
    />
    <DropdownItem
      as={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": e {
            "baseHash": -715527839,
            "baseStyle": undefined,
            "componentId": "sc-bdnxRM",
            "isStatic": false,
            "rules": Array [
              "
  color: ",
              [Function],
              ";
  background-color: ",
              [Function],
              ";
  font-weight: normal;
  display: block;
  width: 100%;
  padding: .25rem 1.5rem;
  clear: both;
  text-align: inherit;
  white-space: nowrap;
  border: 0;

  :hover {
    text-decoration: none;
    background-color: ",
              [Function],
              ";
    color: ",
              [Function],
              ";
  }
",
            ],
            "staticRulesId": "",
          },
          "foldedComponentIds": Array [],
          "render": [Function],
          "shouldForwardProp": undefined,
          "styledComponentId": "sc-bdnxRM",
          "target": Object {
            "$$typeof": Symbol(react.forward_ref),
            "propTypes": Object {
              "innerRef": [Function],
              "onClick": [Function],
              "replace": [Function],
              "target": [Function],
              "to": [Function],
            },
            "render": [Function],
          },
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      disabled={true}
      to="/deploy"
    >
      Deploy to DCAE (DEPLOY)
    </DropdownItem>
    <DropdownItem
      as={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": e {
            "baseHash": -715527839,
            "baseStyle": undefined,
            "componentId": "sc-bdnxRM",
            "isStatic": false,
            "rules": Array [
              "
  color: ",
              [Function],
              ";
  background-color: ",
              [Function],
              ";
  font-weight: normal;
  display: block;
  width: 100%;
  padding: .25rem 1.5rem;
  clear: both;
  text-align: inherit;
  white-space: nowrap;
  border: 0;

  :hover {
    text-decoration: none;
    background-color: ",
              [Function],
              ";
    color: ",
              [Function],
              ";
  }
",
            ],
            "staticRulesId": "",
          },
          "foldedComponentIds": Array [],
          "render": [Function],
          "shouldForwardProp": undefined,
          "styledComponentId": "sc-bdnxRM",
          "target": Object {
            "$$typeof": Symbol(react.forward_ref),
            "propTypes": Object {
              "innerRef": [Function],
              "onClick": [Function],
              "replace": [Function],
              "target": [Function],
              "to": [Function],
            },
            "render": [Function],
          },
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      disabled={true}
      to="/undeploy"
    >
      UnDeploy to DCAE (UNDEPLOY)
    </DropdownItem>
  </Styled(NavDropdown)>
  <Styled(NavDropdown)
    title="TOSCA Control Loop"
  >
    <DropdownHeader
      role="heading"
    >
      Instantiation
    </DropdownHeader>
    <DropdownItem
      as={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": e {
            "baseHash": -715527839,
            "baseStyle": undefined,
            "componentId": "sc-bdnxRM",
            "isStatic": false,
            "rules": Array [
              "
  color: ",
              [Function],
              ";
  background-color: ",
              [Function],
              ";
  font-weight: normal;
  display: block;
  width: 100%;
  padding: .25rem 1.5rem;
  clear: both;
  text-align: inherit;
  white-space: nowrap;
  border: 0;

  :hover {
    text-decoration: none;
    background-color: ",
              [Function],
              ";
    color: ",
              [Function],
              ";
  }
",
            ],
            "staticRulesId": "",
          },
          "foldedComponentIds": Array [],
          "render": [Function],
          "shouldForwardProp": undefined,
          "styledComponentId": "sc-bdnxRM",
          "target": Object {
            "$$typeof": Symbol(react.forward_ref),
            "propTypes": Object {
              "innerRef": [Function],
              "onClick": [Function],
              "replace": [Function],
              "target": [Function],
              "to": [Function],
            },
            "render": [Function],
          },
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      disabled={false}
      to="/monitorInstantiation"
    >
      Monitor Instantiation
    </DropdownItem>
    <DropdownItem
      as={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": e {
            "baseHash": -715527839,
            "baseStyle": undefined,
            "componentId": "sc-bdnxRM",
            "isStatic": false,
            "rules": Array [
              "
  color: ",
              [Function],
              ";
  background-color: ",
              [Function],
              ";
  font-weight: normal;
  display: block;
  width: 100%;
  padding: .25rem 1.5rem;
  clear: both;
  text-align: inherit;
  white-space: nowrap;
  border: 0;

  :hover {
    text-decoration: none;
    background-color: ",
              [Function],
              ";
    color: ",
              [Function],
              ";
  }
",
            ],
            "staticRulesId": "",
          },
          "foldedComponentIds": Array [],
          "render": [Function],
          "shouldForwardProp": undefined,
          "styledComponentId": "sc-bdnxRM",
          "target": Object {
            "$$typeof": Symbol(react.forward_ref),
            "propTypes": Object {
              "innerRef": [Function],
              "onClick": [Function],
              "replace": [Function],
              "target": [Function],
              "to": [Function],
            },
            "render": [Function],
          },
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      disabled={false}
      to="/editControlLoopInstanceProperties"
    >
      Edit Control Loop Instance Properties
    </DropdownItem>
    <DropdownDivider
      role="separator"
    />
    <DropdownHeader
      role="heading"
    >
      Commissioning
    </DropdownHeader>
    <DropdownItem
      as={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": e {
            "baseHash": -715527839,
            "baseStyle": undefined,
            "componentId": "sc-bdnxRM",
            "isStatic": false,
            "rules": Array [
              "
  color: ",
              [Function],
              ";
  background-color: ",
              [Function],
              ";
  font-weight: normal;
  display: block;
  width: 100%;
  padding: .25rem 1.5rem;
  clear: both;
  text-align: inherit;
  white-space: nowrap;
  border: 0;

  :hover {
    text-decoration: none;
    background-color: ",
              [Function],
              ";
    color: ",
              [Function],
              ";
  }
",
            ],
            "staticRulesId": "",
          },
          "foldedComponentIds": Array [],
          "render": [Function],
          "shouldForwardProp": undefined,
          "styledComponentId": "sc-bdnxRM",
          "target": Object {
            "$$typeof": Symbol(react.forward_ref),
            "propTypes": Object {
              "innerRef": [Function],
              "onClick": [Function],
              "replace": [Function],
              "target": [Function],
              "to": [Function],
            },
            "render": [Function],
          },
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      disabled={false}
      to="/readToscaTemplate"
    >
      Manage Commissioned Tosca Template
    </DropdownItem>
    <DropdownItem
      as={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": e {
            "baseHash": -715527839,
            "baseStyle": undefined,
            "componentId": "sc-bdnxRM",
            "isStatic": false,
            "rules": Array [
              "
  color: ",
              [Function],
              ";
  background-color: ",
              [Function],
              ";
  font-weight: normal;
  display: block;
  width: 100%;
  padding: .25rem 1.5rem;
  clear: both;
  text-align: inherit;
  white-space: nowrap;
  border: 0;

  :hover {
    text-decoration: none;
    background-color: ",
              [Function],
              ";
    color: ",
              [Function],
              ";
  }
",
            ],
            "staticRulesId": "",
          },
          "foldedComponentIds": Array [],
          "render": [Function],
          "shouldForwardProp": undefined,
          "styledComponentId": "sc-bdnxRM",
          "target": Object {
            "$$typeof": Symbol(react.forward_ref),
            "propTypes": Object {
              "innerRef": [Function],
              "onClick": [Function],
              "replace": [Function],
              "target": [Function],
              "to": [Function],
            },
            "render": [Function],
          },
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      disabled={false}
      to="/uploadToscaFile"
    >
      Upload Tosca to Commissioning
    </DropdownItem>
    <DropdownItem
      as={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": e {
            "baseHash": -715527839,
            "baseStyle": undefined,
            "componentId": "sc-bdnxRM",
            "isStatic": false,
            "rules": Array [
              "
  color: ",
              [Function],
              ";
  background-color: ",
              [Function],
              ";
  font-weight: normal;
  display: block;
  width: 100%;
  padding: .25rem 1.5rem;
  clear: both;
  text-align: inherit;
  white-space: nowrap;
  border: 0;

  :hover {
    text-decoration: none;
    background-color: ",
              [Function],
              ";
    color: ",
              [Function],
              ";
  }
",
            ],
            "staticRulesId": "",
          },
          "foldedComponentIds": Array [],
          "render": [Function],
          "shouldForwardProp": undefined,
          "styledComponentId": "sc-bdnxRM",
          "target": Object {
            "$$typeof": Symbol(react.forward_ref),
            "propTypes": Object {
              "innerRef": [Function],
              "onClick": [Function],
              "replace": [Function],
              "target": [Function],
              "to": [Function],
            },
            "render": [Function],
          },
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      disabled={false}
      to="/getJsonSchema"
    >
      Edit Control Loop Type Definitions
    </DropdownItem>
  </Styled(NavDropdown)>
  <Styled(NavDropdown)
    title="Help"
  >
    <Styled(NavLink)
      href="https://wiki.onap.org/"
      target="_blank"
    >
      Wiki
    </Styled(NavLink)>
    <Styled(NavLink)
      href="mailto:onap-discuss@lists.onap.org?subject=CLAMP&body=Please send us suggestions or feature enhancements or defect. If possible, please send us the steps to replicate any defect."
    >
      Contact Us
    </Styled(NavLink)>
    <DropdownItem
      as={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": e {
            "baseHash": -715527839,
            "baseStyle": undefined,
            "componentId": "sc-bdnxRM",
            "isStatic": false,
            "rules": Array [
              "
  color: ",
              [Function],
              ";
  background-color: ",
              [Function],
              ";
  font-weight: normal;
  display: block;
  width: 100%;
  padding: .25rem 1.5rem;
  clear: both;
  text-align: inherit;
  white-space: nowrap;
  border: 0;

  :hover {
    text-decoration: none;
    background-color: ",
              [Function],
              ";
    color: ",
              [Function],
              ";
  }
",
            ],
            "staticRulesId": "",
          },
          "foldedComponentIds": Array [],
          "render": [Function],
          "shouldForwardProp": undefined,
          "styledComponentId": "sc-bdnxRM",
          "target": Object {
            "$$typeof": Symbol(react.forward_ref),
            "propTypes": Object {
              "innerRef": [Function],
              "onClick": [Function],
              "replace": [Function],
              "target": [Function],
              "to": [Function],
            },
            "render": [Function],
          },
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      disabled={false}
      to="/userInfo"
    >
      User Info
    </DropdownItem>
  </Styled(NavDropdown)>
</NavbarCollapse>
`;
